@begin[ref=index](section)
   @title(Overview)
   @c(easy-audio) is a collection of audio decoders and metadata readers. You
   can get it from @link[uri="http://github.com/shamazmazum/easy-audio"](GitHub).
   Here is the documentation covering various parts of this collection. All
   decoders work with binary streams with element type @c((unsigned-byte 8)).
   If this documenation is insufficient look at the examples in @c(examples)
   directory for each decoder.
@end(section)

@begin(section)
   @title(FLAC)
   To read and decode FLAC file or stream you need to follow these steps:
   @begin(enum)
      @item(Open a FLAC file/Get a stream with element type @c((unsigned-byte 8)).)
      @item(Pass the stream to @c(flac:open-flac) function which will create and
            return @c(bitreader:reader) object. This object allows
            @c(easy-audio) library to read not just octets, but any amount of
            bits from audio stream.) 
      @item(Read metadata blocks from the stream, passing the object from previous
            step to @c(flac:read-metadata).)
      @item(Do whatever you want with metadata and read the first audio frame with
            @c(flac:read-frame).)
      @item(Decode the frame with @c(flac:decode-frame) and repeat previous step
            until all data is read and decoded.)
   @end(enum)

@begin(section)
   @title(API)
   @u(Conditions).
   @cl:with-package[name="easy-audio.flac"](
      @cl:doc(condition flac-error)
      @cl:doc(condition flac-bad-metadata)
      @cl:doc(condition flac-bad-frame)
   )
   @u(Metadata blocks).
   @cl:with-package[name="easy-audio.flac"](
      @cl:doc(defconstructor streaminfo)
      @cl:doc(function streaminfo-minblocksize)
      @cl:doc(function streaminfo-maxblocksize)
      @cl:doc(function streaminfo-minframesize)
      @cl:doc(function streaminfo-maxframesize)
      @cl:doc(function streaminfo-samplerate)
      @cl:doc(function streaminfo-channels)
      @cl:doc(function streaminfo-bitspersample)
      @cl:doc(function streaminfo-totalsamples)
      @cl:doc(function streaminfo-md5)
      @cl:doc(defconstructor padding)
      @cl:doc(defconstructor vorbis-comment)
      @cl:doc(defconstructor seektable)
      @cl:doc(defconstructor seekpoint)
      @cl:doc(defconstructor cuesheet)
      @cl:doc(function cuesheet-catalog-id)
      @cl:doc(function cuesheet-lead-in)
      @cl:doc(function cuesheet-cdp)
      @cl:doc(function cuesheet-tracks)
      @cl:doc(defconstructor cuesheet-track)
      @cl:doc(defconstructor cuesheet-index)
      @cl:doc(defconstructor picture)
      @cl:doc(function picture-type)
      @cl:doc(function picture-mime-type)
      @cl:doc(function picture-description)
      @cl:doc(function picture-width)
      @cl:doc(function picture-height)
      @cl:doc(function picture-depth)
      @cl:doc(function picture-color-num)
      @cl:doc(function picture-picture)
   )
   @u(Working with audio frames).
   @cl:with-package[name="easy-audio.flac"](
      @cl:doc(function read-frame)
      @cl:doc(function decode-frame)
      @cl:doc(type blocksize)
      @cl:doc(defconstructor frame)
      @cl:doc(function frame-blocking-strategy)
      @cl:doc(function frame-block-size)
      @cl:doc(function frame-sample-rate)
      @cl:doc(variable +left-side+)
      @cl:doc(variable +right-side+)
      @cl:doc(variable +mid-side+)
      @cl:doc(function frame-channel-assignment)
      @cl:doc(function frame-sample-size)
      @cl:doc(function frame-number)
      @cl:doc(function frame-crc-8)
      @cl:doc(function frame-subframes)
      @cl:doc(function frame-crc-16)
   )
   @u(Other functions / helpers).
   @cl:with-package[name="easy-audio.flac"](
      @cl:doc(function open-flac)
      @cl:doc(function read-metadata)
      @cl:doc(function seek-sample)
      @cl:doc(function metadata-find-seektable)
   )
   It also can decode FLAC data from OGG container. There are
   @c(flac:open-ogg-flac), @c(flac:read-ogg-metadata) and @c(flac:read-ogg-frame)
   functions for that purpose. Seeking does not work with OGG container.
@end(section)
@end(section)

@begin(section)
   @title(WavPack)
   WavPack decoder works in the same manner as FLAC decoder, with exception that
   there is no metadata blocks in the beggining of file, but metadata section in
   each WavPack block. This metadata is not as useful as FLAC metadata,
   though. Information about track title, album or performer is usualy stored in
   APEv2 tag in the end of file. So the algorithm for WavPack is usually this:
   @begin(enum)
      @item(Open a WavPack file/Get a stream with element type @c((unsigned-byte
            8)). This step is the same as for FLAC format.) 
      @item(Pass the stream to @c(wv:open-wv) function which will create and
            return @c(bitreader:reader) object. Again, this is what you do when
            working with FLAC, just the function name differs.)
      @item(Read the first WavPack block with @c(wv:read-wv-block). It contains
            all information about channels, samplerate, etc. If the stream/file
            contains more than 2 channels (i.e. 5.1 audio), you can read
            multiple stereo or mono blocks with @c(wv:read-wv-block-multichannel).)
      @item(Decode the block with @c(wv:decode-wv-block) and repeat previous step.)
   @end(enum)

@begin(section)
   @title(API)
   @u(Conditions).
   @cl:with-package[name="easy-audio.wv"](
      @cl:doc(condition wavpack-error)
      @cl:doc(condition wavpack-warning)
      @cl:doc(condition block-error)
      @cl:doc(condition lost-sync)
      @cl:doc(condition unknown-metadata)
   )
   @u(Metadata).
   @cl:with-package[name="easy-audio.wv"](
      @cl:doc(class metadata-riff-header)
      @cl:doc(class metadata-riff-trailer)
   )
   @u(WavPack blocks).
   WavPack block class has readers/accessors in the form @c(BLOCK-SLOTNAME).
   @cl:with-package[name="easy-audio.wv"](
      @cl:doc(struct wv-block)
      @cl:doc(function read-wv-block)
      @cl:doc(function read-wv-block-multichannel)
      @cl:doc(function decode-wv-block)
      @cl:doc(function block-samplerate)
      @cl:doc(function block-bps)
      @cl:doc(function block-channels)
   )
   @u(Other stuff).
   @cl:with-package[name="easy-audio.wv"](
      @cl:doc(function restore-sync)
      @cl:doc(function restore-sync-multichannel)
      @cl:doc(function seek-sample)
      @cl:doc(function open-wv)
      @cl:doc(function read-new-block)
   )
@end(section)
@end(section)

@begin(section)
   @title(Wav)
   This package is for reading Wav audio files (that is if you are lucky
   enough:). The working process is as simple as always:
   @begin(enum)
      @item(Open the audio stream as an ordinary input stream with element
            type @c((unsigned-byte 8)).)
      @item(Create a bitreader object with @c(open-wav).)
      @item(Read wav chunks with metadata calling @c(read-wav-header).)
      @item(Because the metadata can be placed @b(after) the audio data itself,
            rewind the reader to the beginning of audio data calling
            @c(reader-position-to-audio-data).)
      @item(Read audio samples with @c(read-wav-data).)
      @item(Optionaly, @c(decode-wav-data). Usually this step can be ommited because
            the audio stream already has uncompressed PCM data. @c(decode-wav-data) is
            no-op in this case.)
   @end(enum)
   Also you can write simple PCM WAV headers with @c(write-pcm-wav-header)
   function and @c(with-output-to-wav) macro.

@begin(section)
   @title(API)
   @cl:with-package[name="easy-audio.wav"](
      @cl:doc(function read-wav-header)
      @cl:doc(function reader-position-to-audio-data)
      @cl:doc(function read-wav-data)
      @cl:doc(function decode-wav-data)
      @cl:doc(function samples-num)
      @cl:doc(function get-info-metadata)
      @cl:doc(variable +wave-format-pcm+)
      @cl:doc(variable +wave-format-float+)
      @cl:doc(variable +wave-format-alaw+)
      @cl:doc(variable +wave-format-mulaw+)
      @cl:doc(variable +wave-format-extensible+)
      @cl:doc(class format-subchunk)
      @cl:doc(class data-subchunk)
      @cl:doc(class fact-subchunk)
      @cl:doc(class info-subchunk)
      @cl:doc(condition wav-error)
      @cl:doc(condition wav-error-chunk)
      @cl:doc(condition wav-warning)
      @cl:doc(condition wav-unknown-chunk)
      @cl:doc(function write-pcm-wav-header)
      @cl:doc(macro with-output-to-wav)
   )
@end(section)
@end(section)

@begin(section)
   @title(General decoders)
   Currently this package has only A-law and mu-law decoders.
@begin(section)
   @title(API)
   @cl:with-package[name="easy-audio.general"](
      @cl:doc(function g.711-ulaw-decode)
      @cl:doc(function g.711-alaw-decode)
   )
@end(section)
@end(section)

@begin[ref=ape](section)
   @title(Monkey's Audio)
   To read and decode Monkey's Audio you need to follow these steps (these steps
   are roughly the same as in the section dedicated to flac):
   @begin(enum)
      @item(Open an .ape file with element type @c((unsigned-byte 8)).)
      @item(Pass the stream to @c(ape:open-ape) function which will create and
            return @c(bitreader:reader) object.)
      @item(Read metadata blocks, passing the object from previous step to
            @c(ape:read-metadata).)
      @item(Read frames with @c(ape:read-frame). This method accept the number
            of frame you wish to be read as the third argument. Total number of
            frames in the file can be accessed through @c(metadata-total-frames)
            function.)
      @item(Decode the frame with @c(ape:decode-frame) and repeat the previous
            step until all data is read and decoded.)
   @end(enum)

@begin(section)
   @title(API)
   @u(Conditions).
   @cl:with-package[name="easy-audio.ape"](
      @cl:doc(condition ape-error)
   )
   @u(Metadata structure).
   @cl:with-package[name="easy-audio.ape"](
      @cl:doc(defconstructor metadata)
   )
   @u(Reading and decoding).
   @cl:with-package[name="easy-audio.ape"](
      @cl:doc(function open-ape)
      @cl:doc(function read-metadata)
      @cl:doc(function read-frame)
      @cl:doc(function decode-frame)
   )
   @u(Helpers).
   @cl:with-package[name="easy-audio.ape"](
      @cl:doc(macro with-open-ape)
      @cl:doc(function seconds=>frame-number)
   )
@end(section)
@end(section)

@begin(section)
   @title(APE tags)
   @c(easy-audio) also has support for APEv2 tags. You can read a tag
   from a current file position by @c(ape:read-apev2-tag) or from an
   end of a file with @c(ape:read-apev2-tag-from-end). Both of these
   functions accept a bitreader as their only argument.
@begin(section)
   @title(API)
   @cl:with-package[name="easy-audio.ape"](
      @cl:doc(function read-apev2-tag)
      @cl:doc(function read-apev2-tag-from-end)
      @cl:doc(defconstructor apev2-tag-item)
      @cl:doc(condition apev2-tag-error)
      @cl:doc(variable *apev2-external-format*)
   )
@end(section)
@end(section)

@begin(section)
   @title(Utility functions)
   Package @c(easy-audio.core) contains some useful functions. Here they are.
   @cl:with-package[name="easy-audio.core"](
      @cl:doc(function interleave-channels)
   )
@end(section)
